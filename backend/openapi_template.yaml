openapi: 3.0.0
info:
  title: Klopta API
  version: '1.0.0'
  contact:
    name: bazaaer
    email: lander@vanderstighelen.net
servers:
  - url: https://${HOSTNAME}
  - url: http://localhost:5000
paths:
  /api/login:
    post:
      summary: Login and obtain JWT token.
      description: >
        Requires a valid username and password. Log in with username:temp, password:temp for demo purposes.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  default: temp
                password:
                  type: string
                  default: temp
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token
                  role:
                    type: string
                    description: User role
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
  /api/users:
    post:
      summary: Create a new user (Admin only)
      description: Requires admin role. 
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  default: user
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
    get:
      summary: Get list of users (Admin only)
      description: Requires admin role.
      tags:
        - Users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
    delete:
      summary: Delete a user (Admin only)
      description: Requires admin role.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
    put:
      summary: Update a user (Admin only)
      description: Requires admin role.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  default: user
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
  /api/api_keys:
    post:
      summary: Generate a new API key
      description: Requires admin or user role. The user's identity is determined from the JWT token.
      tags:
        - API Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        '200':
          description: API key generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_key:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
    get:
      summary: List API keys
      description: >
        Requires admin or user role. The user's identity is determined from the JWT token.
        Returns the API keys generated by the authenticated user.
      tags:
        - API Keys
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
    delete:
      summary: Revoke an API key
      description: >
        Requires admin or user role. The user's identity is determined from the JWT token.
        Allows the user to revoke one of their own API keys.
      tags:
        - API Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - api_key_id
              properties:
                api_key_id:
                  type: string
      responses:
        '200':
          description: API key revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
  /api/logout:
    post:
      summary: Logout and revoke JWT token
      description: Requires admin or user role.
      tags:
        - Authentication
      responses:
        '200':
          description: Token revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
  /api/protected:
    get:
      summary: Protected endpoint
      description: >
        Requires admin or user role. The user's identity is determined from the JWT token.
        Returns a welcome message to the authenticated user.
      tags:
        - Miscellaneous
      responses:
        '200':
          description: Welcome message
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
  /api:
    get:
      summary: API status
      tags:
        - Miscellaneous
      responses:
        '200':
          description: API is running
          content:
            text/plain:
              schema:
                type: string
                example: Klopta API is running!

  /api/model/rewrite:
    post:
      summary: Rewrite text
      description: >
        Rewrites the provided text using two language models. Allows optional streaming and caching of results.
        Requires a valid API key or JWT token.
      tags:
        - Model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  default: "De workshop vindt plaats op 1/12/2024."
                  description: Text to rewrite
                user_prompt:
                  type: string
                  required: false
                  default: ""
                  description: Custom user prompt to guide the rewrite process. Not required.
                regenerate:
                  type: string
                  required: false
                  default: "false"
                  description: Force regeneration of the response, bypassing the cache ("true" or "false"). Not required, default is "false".
                stream:
                  type: string
                  required: false
                  default: "false"
                  description: Stream the response incrementally ("true" or "false"). Not required, default is "false".
      responses:
        '200':
          description: Rewrite successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Rewrite successful
                  data:
                    type: string
                    description: The rewritten text
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []

  /api/model/fastwrite:
    post:
      summary: Fast rewrite text
      description: >
        Quickly rewrites the provided text using a single language model. Allows optional streaming and caching of results.
        Requires a valid API key or JWT token.
      tags:
        - Model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  default: "De workshop vindt plaats op 1/12/2024."
                  description: Text to rewrite
                user_prompt:
                  type: string
                  required: false
                  default: ""
                  description: Custom user prompt to guide the rewrite process. Not required.
                regenerate:
                  type: string
                  required: false
                  default: "false"
                  description: Force regeneration of the response, bypassing the cache ("true" or "false"). Not required, default is "false".
                stream:
                  type: string
                  required: false
                  default: "false"
                  description: Stream the response incrementally ("true" or "false"). Not required, default is "false".
      responses:
        '200':
          description: Rewrite successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Rewrite successful
                  data:
                    type: string
                    description: The rewritten text
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []



  /api/model/pipeline:
    post:
      summary: Combined scoring and rewriting pipeline
      description: >
        Scores the provided text using Ray Serve, and rewrites sentences with low scores.
        Requires a valid API key or JWT token.
      tags:
        - Model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  default: "De workshop vindt plaats op 1/12/2024. Het is onze bedoeling om in de toekomst initiatieven te nemen die bijdragen aan het vergroten van de veiligheid in onze buurten."
                  description: >
                    Input text to process. Text will be cleaned by removing HTML tags before scoring.
                regenerate:
                  type: string
                  required: false
                  default: "false"
                  description: Force regeneration of rewritten responses, bypassing the cache. ("true" or "false"). Not required, default is "false".
      responses:
        '200':
          description: Pipeline executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        original_sentence:
                          type: string
                          description: The original sentence
                        rewritten_sentence:
                          type: string
                          description: The rewritten sentence
                        score:
                          type: number
                          description: Score assigned by the model
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []

  /api/model/score:
    post:
      summary: Score texts using Ray Serve
      description: >
        This endpoint scores texts using the Ray Serve backend. Requires a valid JWT or API key.
      tags:
        - Model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: [string, array]
                  description: >
                    Input text or a list of texts to be scored. Texts are cleaned by removing HTML tags.
      responses:
        '200':
          description: Scoring successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  scores:
                    type: array
                    items:
                      type: number
                    description: Scores for the provided texts
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error from Ray Serve or server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []

  /api/model/dashboard:
    get:
      summary: Proxy Ray Dashboard
      description: >
        Proxy route for the root of the Ray dashboard. Requires an admin role.
      tags:
        - Model
      responses:
        '200':
          description: Dashboard proxy response
          content:
            text/html:
              schema:
                type: string
                description: HTML content of the Ray dashboard
        '502':
          description: Failed to connect to Ray Dashboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        role:
          type: string
    ApiKey:
      type: object
      properties:
        name:
          type: string
        visible_key:
          type: string
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        status:
          type: string
    Error:
      type: object
      properties:
        msg:
          type: string
          description: Error message
          example: An error occurred